!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/amadeus/Proyects/Cloud_classification/Scripts/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210905.0/
Attention_CNN_model	Modules/neural_models.py	/^class Attention_CNN_model(base_model):$/;"	c
Bidirectional_LSTM_model	Modules/neural_models.py	/^class Bidirectional_LSTM_model(base_model):$/;"	c
CNN_model	Modules/neural_models.py	/^class CNN_model(base_model):$/;"	c
Decision_tree_model	Modules/classification_classic_models.py	/^class Decision_tree_model:$/;"	c
GHI	Reconstructio_graphics.py	/^    GHI = GHI.run(GHI_params)$/;"	v
GHI	Reconstructio_graphics.py	/^    GHI = clear_sky_model()$/;"	v
GHI_model	Modules/GHI_model.py	/^class GHI_model:$/;"	c
GHI_params	Reconstructio_graphics.py	/^    GHI_params = subparams.copy()$/;"	v
Gaussian_naive_model	Modules/classification_classic_models.py	/^class Gaussian_naive_model:$/;"	c
KNN_model	Modules/classification_classic_models.py	/^class KNN_model:$/;"	c
LSTM_model	Modules/neural_models.py	/^class LSTM_model(base_model):$/;"	c
Perceptron_model	Modules/neural_models.py	/^class Perceptron_model(base_model):$/;"	c
RNN_model	Modules/neural_models.py	/^class RNN_model(base_model):$/;"	c
RS	Reconstructio_graphics.py	/^        RS = RS.run(subparams)$/;"	v
RS	Reconstructio_graphics.py	/^        RS = clear_sky_model()$/;"	v
RS_model	Modules/RS_model.py	/^class RS_model(GHI_model):$/;"	c
Random_forest_model	Modules/classification_classic_models.py	/^class Random_forest_model:$/;"	c
Report_reader	Modules/report_reader.py	/^class Report_reader:$/;"	c
SIMA	Daily_graphics.py	/^SIMA = SIMA_model(params)$/;"	v
SIMA	comparison_data.py	/^        SIMA = SIMA_model(params)$/;"	v
SIMA	get_clean_data.py	/^        SIMA = SIMA_model(params)$/;"	v
SIMA	get_clear_sky.py	/^    SIMA = SIMA_model(params)$/;"	v
SIMA_daily	Daily_graphics.py	/^            SIMA_daily = SIMA.get_date_data(date)$/;"	v
SIMA_daily	comparison_data.py	/^    SIMA_daily = SIMA.get_date_data(date)$/;"	v
SIMA_daily	get_clean_data.py	/^    SIMA_daily = SIMA.get_date_data(date)$/;"	v
SIMA_data	Reconstructio_graphics.py	/^    SIMA_data = SIMA_model(subparams)$/;"	v
SIMA_model	Modules/data_model.py	/^class SIMA_model(data_base_model):$/;"	c
SIMA_station	comparison_data.py	/^        SIMA_station = SIMA_daily[(station.upper(),$/;"	v
SIMA_station	comparison_data.py	/^        SIMA_station = get_data_between_hours(SIMA_station,$/;"	v
SIMA_station	get_clean_data.py	/^        SIMA_station = SIMA_daily[(station.upper(),$/;"	v
SIMA_station	get_clean_data.py	/^        SIMA_station = get_data_between_hours(SIMA_station,$/;"	v
SVM_model	Modules/classification_classic_models.py	/^class SVM_model:$/;"	c
Voting_model	Modules/neural_models.py	/^class Voting_model(neural_model):$/;"	c
_	Test_classification_model.py	/^        _, labels = get_labels(params)$/;"	v
__init__	Modules/GHI_model.py	/^    def __init__(self) -> None:$/;"	m	class:GHI_model	typeref:typename:None
__init__	Modules/RS_model.py	/^    def __init__(self) -> None:$/;"	m	class:RS_model	typeref:typename:None
__init__	Modules/classification_classic_models.py	/^    def __init__(self) -> None:$/;"	m	class:Decision_tree_model	typeref:typename:None
__init__	Modules/classification_classic_models.py	/^    def __init__(self) -> None:$/;"	m	class:Gaussian_naive_model	typeref:typename:None
__init__	Modules/classification_classic_models.py	/^    def __init__(self) -> None:$/;"	m	class:KNN_model	typeref:typename:None
__init__	Modules/classification_classic_models.py	/^    def __init__(self) -> None:$/;"	m	class:Random_forest_model	typeref:typename:None
__init__	Modules/classification_classic_models.py	/^    def __init__(self) -> None:$/;"	m	class:SVM_model	typeref:typename:None
__init__	Modules/classification_classic_models.py	/^    def __init__(self) -> None:$/;"	m	class:classification_model	typeref:typename:None
__init__	Modules/clear_sky.py	/^    def __init__(self) -> None:$/;"	m	class:clear_sky_model	typeref:typename:None
__init__	Modules/data_model.py	/^    def __init__(self,$/;"	m	class:SIMA_model	typeref:typename:None
__init__	Modules/data_model.py	/^    def __init__(self,$/;"	m	class:classification_data	typeref:typename:None
__init__	Modules/data_model.py	/^    def __init__(self,$/;"	m	class:clean_data_model	typeref:typename:None
__init__	Modules/data_model.py	/^    def __init__(self,$/;"	m	class:clear_sky_data	typeref:typename:None
__init__	Modules/data_model.py	/^    def __init__(self,$/;"	m	class:comparison_data	typeref:typename:None
__init__	Modules/data_model.py	/^    def __init__(self,$/;"	m	class:data_base_model	typeref:typename:None
__init__	Modules/data_model.py	/^    def __init__(self,$/;"	m	class:full_comparison_data	typeref:typename:None
__init__	Modules/data_model.py	/^    def __init__(self,$/;"	m	class:full_data_model	typeref:typename:None
__init__	Modules/dataset_model.py	/^    def __init__(self,$/;"	m	class:dataset_model	typeref:typename:None
__init__	Modules/neural_models.py	/^    def __init__(self) -> None:$/;"	m	class:Voting_model	typeref:typename:None
__init__	Modules/neural_models.py	/^    def __init__(self) -> None:$/;"	m	class:neural_model	typeref:typename:None
__init__	Modules/neural_models.py	/^    def __init__(self,$/;"	m	class:Attention_CNN_model	typeref:typename:None
__init__	Modules/neural_models.py	/^    def __init__(self,$/;"	m	class:Bidirectional_LSTM_model	typeref:typename:None
__init__	Modules/neural_models.py	/^    def __init__(self,$/;"	m	class:CNN_model	typeref:typename:None
__init__	Modules/neural_models.py	/^    def __init__(self,$/;"	m	class:LSTM_model	typeref:typename:None
__init__	Modules/neural_models.py	/^    def __init__(self,$/;"	m	class:Perceptron_model	typeref:typename:None
__init__	Modules/neural_models.py	/^    def __init__(self,$/;"	m	class:RNN_model	typeref:typename:None
__init__	Modules/neural_models.py	/^    def __init__(self,$/;"	m	class:base_model	typeref:typename:None
__init__	Modules/report_reader.py	/^    def __init__(self,$/;"	m	class:Report_reader	typeref:typename:None
__init__	Modules/transform_data.py	/^    def __init__(self,$/;"	m	class:transform_data_model	typeref:typename:None
_build	Modules/neural_models.py	/^    def _build(self,$/;"	m	class:Attention_CNN_model	typeref:typename:None
_build	Modules/neural_models.py	/^    def _build(self,$/;"	m	class:Bidirectional_LSTM_model	typeref:typename:None
_build	Modules/neural_models.py	/^    def _build(self,$/;"	m	class:CNN_model	typeref:typename:None
_build	Modules/neural_models.py	/^    def _build(self,$/;"	m	class:LSTM_model	typeref:typename:None
_build	Modules/neural_models.py	/^    def _build(self,$/;"	m	class:Perceptron_model	typeref:typename:None
_build	Modules/neural_models.py	/^    def _build(self,$/;"	m	class:RNN_model	typeref:typename:None
_build	Modules/neural_models.py	/^    def _build(self,$/;"	m	class:base_model	typeref:typename:None
_compile	Modules/neural_models.py	/^    def _compile(self,$/;"	m	class:base_model	typeref:typename:None
_create_dataset	Modules/dataset_model.py	/^    def _create_dataset(self,$/;"	m	class:dataset_model	typeref:typename:DataFrame
_get_callbacks	Modules/neural_models.py	/^    def _get_callbacks(self,$/;"	m	class:base_model	typeref:typename:list
_get_dataset	Modules/neural_models.py	/^    def _get_dataset(self,$/;"	m	class:neural_model	typeref:typename:Type
_get_datetime	Modules/clear_sky.py	/^    def _get_datetime(self,$/;"	m	class:clear_sky_model	typeref:typename:str
_get_day_and_hour	Modules/GHI_model.py	/^    def _get_day_and_hour(self,$/;"	m	class:GHI_model	typeref:typename:tuple
_get_declination_angle	Modules/GHI_model.py	/^    def _get_declination_angle(self,$/;"	m	class:GHI_model	typeref:typename:float
_get_eccentricity_correction	Modules/GHI_model.py	/^    def _get_eccentricity_correction(self,$/;"	m	class:GHI_model	typeref:typename:float
_get_filename	Modules/data_model.py	/^    def _get_filename(self) -> str:$/;"	m	class:SIMA_model	typeref:typename:str
_get_filename	Modules/data_model.py	/^    def _get_filename(self) -> str:$/;"	m	class:classification_data	typeref:typename:str
_get_filename	Modules/data_model.py	/^    def _get_filename(self) -> str:$/;"	m	class:clean_data_model	typeref:typename:str
_get_filename	Modules/data_model.py	/^    def _get_filename(self) -> str:$/;"	m	class:clear_sky_data	typeref:typename:str
_get_filename	Modules/data_model.py	/^    def _get_filename(self) -> str:$/;"	m	class:comparison_data	typeref:typename:str
_get_filename	Modules/data_model.py	/^    def _get_filename(self) -> str:$/;"	m	class:data_base_model	typeref:typename:str
_get_filename	Modules/data_model.py	/^    def _get_filename(self) -> str:$/;"	m	class:full_comparison_data	typeref:typename:str
_get_filename	Modules/data_model.py	/^    def _get_filename(self) -> str:$/;"	m	class:full_data_model	typeref:typename:str
_get_filename	Modules/report_reader.py	/^    def _get_filename(self,$/;"	m	class:Report_reader	typeref:typename:str
_get_filename_best_model	Modules/neural_models.py	/^    def _get_filename_best_model(self,$/;"	m	class:base_model	typeref:typename:str
_get_folder_save	Modules/neural_models.py	/^    def _get_folder_save(self) -> str:$/;"	m	class:neural_model	typeref:typename:str
_get_gamma	Modules/GHI_model.py	/^    def _get_gamma(self,$/;"	m	class:GHI_model	typeref:typename:float
_get_header_report	Modules/report_reader.py	/^    def _get_header_report(self,$/;"	m	class:Report_reader	typeref:typename:None
_get_hour	Modules/clear_sky.py	/^    def _get_hour(self, minutes: int) -> str:$/;"	m	class:clear_sky_model	typeref:typename:str
_get_hour_from_datetime	Modules/GHI_model.py	/^    def _get_hour_from_datetime(self,$/;"	m	class:GHI_model	typeref:typename:float
_get_input_dim	Modules/neural_models.py	/^    def _get_input_dim(self,$/;"	m	class:neural_model	typeref:typename:int
_get_local_solar_time	Modules/GHI_model.py	/^    def _get_local_solar_time(self,$/;"	m	class:GHI_model	typeref:typename:float
_get_minute	Modules/clear_sky.py	/^    def _get_minute(self, minutes: int) -> str:$/;"	m	class:clear_sky_model	typeref:typename:str
_get_report	Modules/neural_models.py	/^    def _get_report(self) -> None:$/;"	m	class:neural_model	typeref:typename:None
_get_solar_hour_angle	Modules/GHI_model.py	/^    def _get_solar_hour_angle(self,$/;"	m	class:GHI_model	typeref:typename:float
_get_time	Modules/clear_sky.py	/^    def _get_time(self, minutes: int) -> str:$/;"	m	class:clear_sky_model	typeref:typename:str
_get_time_correction_factor	Modules/GHI_model.py	/^    def _get_time_correction_factor(self,$/;"	m	class:GHI_model	typeref:typename:float
_get_value	Modules/report_reader.py	/^    def _get_value(self,$/;"	m	class:Report_reader	typeref:typename:float
_get_vector	Modules/dataset_model.py	/^    def _get_vector(self,$/;"	m	class:dataset_model	typeref:typename:array
_get_zenith_angle	Modules/GHI_model.py	/^    def _get_zenith_angle(self,$/;"	m	class:GHI_model	typeref:typename:float
_load_model	Modules/neural_models.py	/^    def _load_model(self,$/;"	m	class:Attention_CNN_model	typeref:typename:None
_load_model	Modules/neural_models.py	/^    def _load_model(self,$/;"	m	class:base_model	typeref:typename:None
_read	Modules/data_model.py	/^    def _read(self) -> DataFrame:$/;"	m	class:SIMA_model	typeref:typename:DataFrame
_read	Modules/data_model.py	/^    def _read(self) -> DataFrame:$/;"	m	class:data_base_model	typeref:typename:DataFrame
_read	Modules/dataset_model.py	/^    def _read(self) -> DataFrame:$/;"	m	class:dataset_model	typeref:typename:DataFrame
_read_classical_model	Modules/report_reader.py	/^    def _read_classical_model(self,$/;"	m	class:Report_reader	typeref:typename:DataFrame
_read_file	Modules/report_reader.py	/^    def _read_file(self,$/;"	m	class:Report_reader	typeref:typename:str
_read_neural_model	Modules/report_reader.py	/^    def _read_neural_model(self,$/;"	m	class:Report_reader	typeref:typename:DataFrame
_run_clean_data	Modules/transform_data.py	/^    def _run_clean_data(self,$/;"	m	class:transform_data_model
_run_clear_sky	Modules/transform_data.py	/^    def _run_clear_sky(self,$/;"	m	class:transform_data_model
_run_comparison	Modules/transform_data.py	/^    def _run_comparison(self,$/;"	m	class:transform_data_model
_run_cosine_similarity	Modules/transform_data.py	/^    def _run_cosine_similarity(self,$/;"	m	class:transform_data_model
_run_full_data	Modules/transform_data.py	/^    def _run_full_data(self,$/;"	m	class:transform_data_model
_save_confusion_matrix	Modules/neural_models.py	/^    def _save_confusion_matrix(self,) -> None:$/;"	m	class:neural_model	typeref:typename:None
_save_history	Modules/neural_models.py	/^    def _save_history(self,$/;"	m	class:neural_model	typeref:typename:None
_select_model	Modules/clear_sky.py	/^    def _select_model(self,$/;"	m	class:clear_sky_model	typeref:typename:None
_to_degree	Modules/GHI_model.py	/^    def _to_degree(self,$/;"	m	class:GHI_model	typeref:typename:float
_to_radian	Modules/GHI_model.py	/^    def _to_radian(self,$/;"	m	class:GHI_model	typeref:typename:float
_to_table	Modules/report_reader.py	/^    def _to_table(self,$/;"	m	class:Report_reader	typeref:typename:DataFrame
all_axs	distribution_per_classification.py	/^all_axs = all_axs.T$/;"	v
all_axs	distribution_per_classification.py	/^fig, all_axs = plt.subplots(3, 4,$/;"	v
autolabel	distribution.py	/^def autolabel(rects: BarContainer) -> None:$/;"	f	typeref:typename:None
axs	Reconstructio_graphics.py	/^axs = axs.flatten()$/;"	v
axs	Reconstructio_graphics.py	/^fig, axs = plt.subplots(2, 2,$/;"	v
bar	Count_data.py	/^bar = tqdm(files)$/;"	v
bar	Test_classification_model.py	/^bar = tqdm(params["clear sky models"])$/;"	v
bar	distribution.py	/^bar = plt.bar(frecuency.index,$/;"	v
bar	get_clear_sky.py	/^    bar = tqdm(dates)$/;"	v
bar_dates	comparison_data.py	/^bar_dates = tqdm(dates)$/;"	v
bar_dates	full_comparison.py	/^bar_dates = tqdm(dates)$/;"	v
bar_dates	get_clean_data.py	/^bar_dates = tqdm(dates)$/;"	v
bar_dates	get_full_data.py	/^bar_dates = tqdm(dates)$/;"	v
base_model	Modules/neural_models.py	/^class base_model:$/;"	c
build	Modules/neural_models.py	/^    def build(self,$/;"	m	class:neural_model	typeref:typename:None
classification	central_tendency_per_classification.py	/^classification = classification_data(params)$/;"	v
classification	distribution.py	/^classification = read_csv(filename,$/;"	v
classification	distribution_per_classification.py	/^            classification = params["classification"][index]["label"]$/;"	v
classification	full_central_tendency_per_classification.py	/^classification = classification_data(params)$/;"	v
classification	get_full_data.py	/^classification = classification_data(params)$/;"	v
classification_daily	get_full_data.py	/^    classification_daily = classification.get_date_data(date)$/;"	v
classification_data	Modules/data_model.py	/^class classification_data(data_base_model):$/;"	c
classification_model	Modules/classification_classic_models.py	/^class classification_model:$/;"	c
classification_station	get_full_data.py	/^        classification_station = classification_daily[station]$/;"	v
classification_station	get_full_data.py	/^        classification_station = classification_station[0]$/;"	v
clean_data	Modules/functions.py	/^def clean_data(data: DataFrame,$/;"	f	typeref:typename:DataFrame
clean_data	get_full_data.py	/^clean_data = clean_data_model(params)$/;"	v
clean_data	get_similarity_matrix.py	/^clean_data = clean_data_model(params)$/;"	v
clean_data_daily	get_full_data.py	/^    clean_data_daily = clean_data.get_date_data(date)$/;"	v
clean_data_model	Modules/data_model.py	/^class clean_data_model(data_base_model):$/;"	c
clean_data_station	get_full_data.py	/^            clean_data_station = fill_data(clean_data_station,$/;"	v
clean_data_station	get_full_data.py	/^        clean_data_station = clean_data_daily[station]$/;"	v
clean_data_station	get_full_data.py	/^        clean_data_station = get_data_between_hours(clean_data_station,$/;"	v
clear_sky	Daily_full_graphics.py	/^clear_sky = clear_sky_data(params)$/;"	v
clear_sky	Daily_graphics.py	/^clear_sky = clear_sky_data(params)$/;"	v
clear_sky	comparison_data.py	/^clear_sky = clear_sky_data(params)$/;"	v
clear_sky	comparison_missing_data_graphics.py	/^clear_sky = clear_sky.get_data(params["station"],$/;"	v
clear_sky	comparison_missing_data_graphics.py	/^clear_sky = clear_sky_data(params)$/;"	v
clear_sky	comparison_missing_data_graphics.py	/^clear_sky = get_hourly_mean(clear_sky)$/;"	v
clear_sky	comparison_models_graphics.py	/^clear_sky = clear_sky_model()$/;"	v
clear_sky	full_comparison.py	/^clear_sky = clear_sky_data(params)$/;"	v
clear_sky	get_clean_data.py	/^clear_sky = clear_sky_data(params)$/;"	v
clear_sky	get_clear_sky.py	/^            clear_sky = model.run(params)$/;"	v
clear_sky_daily	Daily_full_graphics.py	/^        clear_sky_daily = clear_sky.get_date_data(date)$/;"	v
clear_sky_daily	Daily_full_graphics.py	/^        clear_sky_daily = get_hourly_mean(clear_sky_daily)$/;"	v
clear_sky_daily	Daily_graphics.py	/^            clear_sky_daily = clear_sky.get_date_data(date)$/;"	v
clear_sky_daily	Daily_graphics.py	/^            clear_sky_daily = get_hourly_mean(clear_sky_daily)$/;"	v
clear_sky_daily	comparison_data.py	/^    clear_sky_daily = clear_sky.get_date_data(date)$/;"	v
clear_sky_daily	full_comparison.py	/^    clear_sky_daily = clear_sky.get_date_data(date)$/;"	v
clear_sky_daily	get_clean_data.py	/^    clear_sky_daily = clear_sky.get_date_data(date)$/;"	v
clear_sky_data	Modules/data_model.py	/^class clear_sky_data(data_base_model):$/;"	c
clear_sky_model	Modules/clear_sky.py	/^class clear_sky_model:$/;"	c
clear_sky_station	comparison_data.py	/^        clear_sky_station = clear_sky_daily[station]$/;"	v
clear_sky_station	comparison_data.py	/^        clear_sky_station = get_data_between_hours(clear_sky_station,$/;"	v
clear_sky_station	comparison_data.py	/^        clear_sky_station = get_hourly_mean(clear_sky_station)$/;"	v
clear_sky_station	full_comparison.py	/^        clear_sky_station = clear_sky_daily[station]$/;"	v
clear_sky_station	full_comparison.py	/^        clear_sky_station = get_data_between_hours(clear_sky_station,$/;"	v
clear_sky_station	full_comparison.py	/^        clear_sky_station = get_hourly_mean(clear_sky_station)$/;"	v
clear_sky_station	get_clean_data.py	/^        clear_sky_station = clear_sky_daily[station]$/;"	v
clear_sky_station	get_clean_data.py	/^        clear_sky_station = get_data_between_hours(clear_sky_station,$/;"	v
clear_sky_station	get_clean_data.py	/^        clear_sky_station = get_hourly_mean(clear_sky_station)$/;"	v
cloud_types	central_tendency_per_classification.py	/^cloud_types, names = get_labels(params)$/;"	v
cloud_types	full_central_tendency_per_classification.py	/^cloud_types, names = get_labels(params)$/;"	v
color	distribution_per_classification.py	/^        color = params["classification"][index]["color"]$/;"	v
colors	distribution.py	/^colors = get_colors(params)$/;"	v
columns	Count_data.py	/^    columns = [(station, value)$/;"	v
columns	Count_data.py	/^    columns = data.columns$/;"	v
columns	organize_2021_data.py	/^    columns = list(results.columns)$/;"	v
comparison	Reconstructio_graphics.py	/^    comparison = transform_data.run(data)$/;"	v
comparison	central_tendency.py	/^comparison = full_comparison_data(params)$/;"	v
comparison	central_tendency_per_classification.py	/^comparison = comparison_data(params)$/;"	v
comparison	comparison_data.py	/^        comparison = comparison_operation(SIMA_station,$/;"	v
comparison	comparison_data.py	/^        comparison = threshold_filter(comparison,$/;"	v
comparison	full_central_tendency_per_classification.py	/^comparison = full_comparison_data(params)$/;"	v
comparison	full_comparison.py	/^        comparison = comparison_operation(full_data_station,$/;"	v
comparison	get_clean_data.py	/^comparison = comparison_data(params)$/;"	v
comparison_daily	get_clean_data.py	/^    comparison_daily = comparison.get_date_data(date)$/;"	v
comparison_data	Modules/data_model.py	/^class comparison_data(data_base_model):$/;"	c
comparison_operation	Modules/functions.py	/^def comparison_operation(measurement: DataFrame,$/;"	f	typeref:typename:DataFrame
comparison_station	get_clean_data.py	/^        comparison_station = comparison_daily[station]$/;"	v
comparison_station	get_clean_data.py	/^        comparison_station = get_data_between_hours(comparison_station,$/;"	v
cosine	get_similarity_matrix.py	/^cosine = 1-pairwise_distances(vectors,$/;"	v
cosine	get_similarity_matrix.py	/^cosine = DataFrame(cosine,$/;"	v
daily	central_tendency.py	/^daily = comparison.get_daily_mean()$/;"	v
daily	central_tendency_per_classification.py	/^daily = comparison.get_daily_mean()$/;"	v
daily	full_central_tendency_per_classification.py	/^daily = comparison.get_daily_mean()$/;"	v
data	Count_data.py	/^    data = data >= params["Minimum data per day"]$/;"	v
data	Count_data.py	/^    data = data >= params["Minimum data per month"]$/;"	v
data	Count_data.py	/^    data = data.resample("D").count()$/;"	v
data	Count_data.py	/^    data = data.resample("MS").sum()$/;"	v
data	Count_data.py	/^    data = data.sum()$/;"	v
data	Count_data.py	/^    data = data[columns]$/;"	v
data	Count_data.py	/^    data = data[data.index.hour <= 19]$/;"	v
data	Count_data.py	/^    data = data[data.index.hour >= 8]$/;"	v
data	Count_data.py	/^    data = read_csv(filename,$/;"	v
data	Reconstructio_graphics.py	/^    data = DataFrame(data)$/;"	v
data	Reconstructio_graphics.py	/^    data = SIMA_data.get_data(subparams["station"],$/;"	v
data	Reconstructio_graphics.py	/^    data = get_data_between_hours(data,$/;"	v
data	central_tendency_per_classification.py	/^data = dict()$/;"	v
data	comparison_missing_data_graphics.py	/^data = SIMA_model(params)$/;"	v
data	comparison_missing_data_graphics.py	/^data = data.get_data(params["station"],$/;"	v
data	comparison_models_graphics.py	/^data = SIMA_model(params)$/;"	v
data	comparison_models_graphics.py	/^data = data.get_data("Noroeste",$/;"	v
data	full_central_tendency_per_classification.py	/^data = dict()$/;"	v
data	get_clean_data.py	/^        data = clean_data(SIMA_station,$/;"	v
data	history_plot.py	/^data = read_csv(filename)$/;"	v
data	organize_2021_data.py	/^        data = data_format(data)$/;"	v
data	organize_2021_data.py	/^        data = read_csv(file)$/;"	v
data_base_model	Modules/data_model.py	/^class data_base_model:$/;"	c
data_format	organize_2021_data.py	/^def data_format(data: DataFrame) -> DataFrame:$/;"	f	typeref:typename:DataFrame
dataset	Test_classification_model.py	/^        dataset = dataset_model(params)$/;"	v
dataset	distribution_per_classification.py	/^    dataset = dataset_model(params)$/;"	v
dataset	get_clear_sky.py	/^            dataset = SIMA.get_station_info(params,$/;"	v
dataset_model	Modules/dataset_model.py	/^class dataset_model:$/;"	c
date	Reconstructio_graphics.py	/^    date = subparams["date"]$/;"	v
date_format	organize_2021_data.py	/^def date_format(date: str) -> str:$/;"	f	typeref:typename:str
dates	Daily_full_graphics.py	/^dates = clear_sky.get_dates()$/;"	v
dates	Daily_graphics.py	/^dates = clear_sky.get_dates()$/;"	v
dates	central_tendency_per_classification.py	/^        dates = values.index$/;"	v
dates	comparison_data.py	/^dates = clear_sky.get_dates()$/;"	v
dates	full_central_tendency_per_classification.py	/^        dates = values.index$/;"	v
dates	full_comparison.py	/^dates = clear_sky.get_dates()$/;"	v
dates	get_clean_data.py	/^dates = comparison.get_dates()$/;"	v
dates	get_clear_sky.py	/^    dates = SIMA.get_dates()$/;"	v
dates	get_full_data.py	/^dates = clean_data.get_dates()$/;"	v
dates	get_similarity_matrix.py	/^dates = clean_data.get_dates()$/;"	v
dates	make_template_classification.py	/^dates = [file.split(".")[0]$/;"	v
dates_bar	Daily_full_graphics.py	/^    dates_bar = tqdm(dates)$/;"	v
dates_bar	Daily_graphics.py	/^    dates_bar = tqdm(dates)$/;"	v
datetime	Daily_full_graphics.py	/^        datetime = datetime.date()$/;"	v
datetime	Daily_full_graphics.py	/^        datetime = to_datetime(date)$/;"	v
datetime_format	Modules/functions.py	/^def datetime_format(date: Timestamp,$/;"	f	typeref:typename:str
define_model	Modules/classification_classic_models.py	/^    def define_model(self,$/;"	m	class:classification_model	typeref:typename:None
fig	Reconstructio_graphics.py	/^fig, axs = plt.subplots(2, 2,$/;"	v
fig	distribution_per_classification.py	/^fig, all_axs = plt.subplots(3, 4,$/;"	v
file	Test_classification_model.py	/^file = open(filename, "w")$/;"	v
filename	Count_data.py	/^    filename = join(params["path data"],$/;"	v
filename	Count_data.py	/^filename = join(params["path results"],$/;"	v
filename	Reconstructio_graphics.py	/^filename = join(params["path graphics"],$/;"	v
filename	Test_classification_model.py	/^        filename = "{}_{}_matrix.csv".format(operation,$/;"	v
filename	Test_classification_model.py	/^        filename = join(folder,$/;"	v
filename	Test_classification_model.py	/^filename = "report.csv"$/;"	v
filename	Test_classification_model.py	/^filename = join(folder,$/;"	v
filename	central_tendency_per_classification.py	/^filename = "{}_{}.csv".format(params["file results"],$/;"	v
filename	central_tendency_per_classification.py	/^filename = join(params["path results"],$/;"	v
filename	comparison_data.py	/^filename = f"{params['file results']}.csv"$/;"	v
filename	comparison_data.py	/^filename = join(params['path results'],$/;"	v
filename	distribution.py	/^filename = join(params["path graphics"],$/;"	v
filename	distribution.py	/^filename = join(params["path results"],$/;"	v
filename	full_central_tendency_per_classification.py	/^filename = "{}_{}.csv".format(params["file results"],$/;"	v
filename	full_central_tendency_per_classification.py	/^filename = join(params["path results"],$/;"	v
filename	full_comparison.py	/^filename = "{}_{}.csv".format(params["file results"],$/;"	v
filename	full_comparison.py	/^filename = join(params['path results'],$/;"	v
filename	get_clean_data.py	/^filename = "{}.csv".format(params["file results"])$/;"	v
filename	get_clean_data.py	/^filename = join(params['path results'],$/;"	v
filename	get_clear_sky.py	/^filename = join(params["path results"],$/;"	v
filename	get_full_data.py	/^filename = "{}.csv".format(params["file results"])$/;"	v
filename	get_full_data.py	/^filename = f"{params['similarity file']}.csv"$/;"	v
filename	get_full_data.py	/^filename = join(params["path results"],$/;"	v
filename	get_resume_estimators.py	/^filename = "{}_{}_resume.csv".format(params["comparison operation"],$/;"	v
filename	get_resume_estimators.py	/^filename = join(folder,$/;"	v
filename	get_similarity_matrix.py	/^filename = "{}.csv".format(params["file results"])$/;"	v
filename	get_similarity_matrix.py	/^filename = join(params["path results"],$/;"	v
filename	history_plot.py	/^filename = "{}_{}.csv".format(params["comparison operation"],$/;"	v
filename	history_plot.py	/^filename = join(params["path results"],$/;"	v
filename	make_template_classification.py	/^filename = join(params["path results"],$/;"	v
files	Count_data.py	/^files = sorted(ls(params["path data"]))$/;"	v
files	make_template_classification.py	/^files = ls(path)$/;"	v
files	organize_2021_data.py	/^    files = [file$/;"	v
files	organize_2021_data.py	/^    files = sorted(ls())$/;"	v
fill_data	Modules/functions.py	/^def fill_data(data: DataFrame,$/;"	f	typeref:typename:DataFrame
fill_number	Modules/clear_sky.py	/^def fill_number(number: int,$/;"	f	typeref:typename:str
fill_number	Modules/functions.py	/^def fill_number(number: int,$/;"	f	typeref:typename:str
folder	Test_classification_model.py	/^folder = join(params["path results"],$/;"	v
folder	get_resume_estimators.py	/^folder = join(params["path results"],$/;"	v
folder	get_resume_estimators.py	/^folder = params["model type"].replace(" ",$/;"	v
frecuency	distribution.py	/^frecuency = 100*frecuency \/ frecuency.sum()$/;"	v
frecuency	distribution.py	/^frecuency = get_frecuency(classification)$/;"	v
full_comparison_data	Modules/data_model.py	/^class full_comparison_data(data_base_model):$/;"	c
full_data	Daily_full_graphics.py	/^full_data = full_data_model(params)$/;"	v
full_data	comparison_missing_data_graphics.py	/^full_data = full_data.get_data(params["station"],$/;"	v
full_data	comparison_missing_data_graphics.py	/^full_data = full_data_model(params)$/;"	v
full_data	full_comparison.py	/^full_data = full_data_model(params)$/;"	v
full_data	get_full_data.py	/^    full_data = concat([full_data,$/;"	v
full_data	get_full_data.py	/^full_data = DataFrame()$/;"	v
full_data_daily	Daily_full_graphics.py	/^        full_data_daily = full_data.get_date_data(date)$/;"	v
full_data_daily	Daily_full_graphics.py	/^        full_data_daily = get_hourly_mean(full_data_daily)$/;"	v
full_data_daily	full_comparison.py	/^    full_data_daily = full_data.get_date_data(date)$/;"	v
full_data_model	Modules/data_model.py	/^class full_data_model(data_base_model):$/;"	c
full_data_station	full_comparison.py	/^        full_data_station = full_data_daily[station]$/;"	v
full_data_station	full_comparison.py	/^        full_data_station = get_data_between_hours(full_data_station,$/;"	v
get_best_similarity_dates	Modules/functions.py	/^def get_best_similarity_dates(similarity: DataFrame,$/;"	f	typeref:typename:list
get_classification_params	Modules/params.py	/^def get_classification_params(params: dict) -> dict:$/;"	f	typeref:typename:dict
get_colors	Modules/functions.py	/^def get_colors(params: dict) -> list:$/;"	f	typeref:typename:list
get_confusion_matrix	Modules/functions.py	/^def get_confusion_matrix(target: list,$/;"	f	typeref:typename:DataFrame
get_cosine_similarity	Modules/functions.py	/^def get_cosine_similarity(data: DataFrame,$/;"	f	typeref:typename:DataFrame
get_daily_mean	Modules/data_model.py	/^    def get_daily_mean(self) -> DataFrame:$/;"	m	class:comparison_data	typeref:typename:DataFrame
get_daily_mean	Modules/data_model.py	/^    def get_daily_mean(self) -> DataFrame:$/;"	m	class:full_comparison_data	typeref:typename:DataFrame
get_data	Modules/data_model.py	/^    def get_data(self,$/;"	m	class:SIMA_model	typeref:typename:DataFrame
get_data	Modules/data_model.py	/^    def get_data(self,$/;"	m	class:data_base_model	typeref:typename:DataFrame
get_data_between_hours	Modules/data_model.py	/^    def get_data_between_hours(self) -> DataFrame:$/;"	m	class:data_base_model	typeref:typename:DataFrame
get_data_between_hours	Modules/functions.py	/^def get_data_between_hours(data: DataFrame,$/;"	f	typeref:typename:DataFrame
get_data_from_type	Modules/data_model.py	/^    def get_data_from_type(self,$/;"	m	class:classification_data	typeref:typename:DataFrame
get_data_per_dates	Modules/data_model.py	/^    def get_data_per_dates(self,$/;"	m	class:comparison_data	typeref:typename:DataFrame
get_data_per_dates	Modules/data_model.py	/^    def get_data_per_dates(self,$/;"	m	class:full_comparison_data	typeref:typename:DataFrame
get_date_data	Modules/data_model.py	/^    def get_date_data(self,$/;"	m	class:data_base_model	typeref:typename:DataFrame
get_dates	Modules/data_model.py	/^    def get_dates(self) -> list:$/;"	m	class:data_base_model	typeref:typename:list
get_frecuency	distribution.py	/^def get_frecuency(data: DataFrame) -> DataFrame:$/;"	f	typeref:typename:DataFrame
get_group_model	Modules/functions.py	/^def get_group_model(model: str,$/;"	f	typeref:typename:str
get_header	compare_estimators.py	/^def get_header(file: str) -> str:$/;"	f	typeref:typename:str
get_hourly_mean	Modules/functions.py	/^def get_hourly_mean(data: DataFrame) -> DataFrame:$/;"	f	typeref:typename:DataFrame
get_index	Reconstructio_graphics.py	/^def get_index(clear_data: DataFrame,$/;"	f	typeref:typename:DataFrame
get_labels	Modules/functions.py	/^def get_labels(params: dict) -> tuple:$/;"	f	typeref:typename:tuple
get_neural_params	Modules/params.py	/^def get_neural_params(params: dict) -> dict:$/;"	f	typeref:typename:dict
get_parameter_name	organize_2021_data.py	/^def get_parameter_name(file: str) -> str:$/;"	f	typeref:typename:str
get_params	Modules/params.py	/^def get_params() -> dict:$/;"	f	typeref:typename:dict
get_report	Modules/functions.py	/^def get_report(target: list,$/;"	f	typeref:typename:str
get_reports	compare_estimators.py	/^def get_reports(models: str,$/;"	f	typeref:typename:DataFrame
get_similarity_vectors	Modules/functions.py	/^def get_similarity_vectors(clean_data: Type,$/;"	f	typeref:typename:DataFrame
get_station_data	Modules/data_model.py	/^    def get_station_data(self,$/;"	m	class:SIMA_model	typeref:typename:DataFrame
get_station_data	Modules/data_model.py	/^    def get_station_data(self,$/;"	m	class:data_base_model	typeref:typename:DataFrame
get_station_info	Modules/data_model.py	/^    def get_station_info(self,$/;"	m	class:SIMA_model	typeref:typename:dict
get_station_location	Reconstructio_graphics.py	/^def get_station_location(SIMA: SIMA_model,$/;"	f	typeref:typename:dict
get_subparams	Reconstructio_graphics.py	/^def get_subparams(station: str,$/;"	f	typeref:typename:dict
get_threshold	Modules/params.py	/^def get_threshold(params: dict) -> dict:$/;"	f	typeref:typename:dict
get_voting_models	Modules/params.py	/^def get_voting_models(params: dict) -> list:$/;"	f	typeref:typename:list
ghi	comparison_models_graphics.py	/^ghi = clear_sky.run(params)$/;"	v
ghi	comparison_models_graphics.py	/^ghi = get_hourly_mean(ghi)$/;"	v
handles	Reconstructio_graphics.py	/^handles, labels = ax.get_legend_handles_labels()$/;"	v
header	get_full_data.py	/^            header = f"{station} {date}"$/;"	v
headers	get_similarity_matrix.py	/^headers = [f"{station} {date}"$/;"	v
index_vector	distribution_per_classification.py	/^        index_vector = dataset.train[1] == index$/;"	v
keys	distribution.py	/^keys, label = get_labels(params)$/;"	v
label	distribution.py	/^keys, label = get_labels(params)$/;"	v
labels	Reconstructio_graphics.py	/^handles, labels = ax.get_legend_handles_labels()$/;"	v
labels	Test_classification_model.py	/^        _, labels = get_labels(params)$/;"	v
ls	Count_data.py	/^from os import listdir as ls$/;"	x	nameref:unknown:listdir
ls	Modules/functions.py	/^def ls(path: str) -> list:$/;"	f	typeref:typename:list
ls	organize_2021_data.py	/^from os import listdir as ls$/;"	x	nameref:unknown:listdir
matrix	Test_classification_model.py	/^        matrix = get_confusion_matrix(dataset.test[1],$/;"	v
mkdir	Modules/functions.py	/^def mkdir(path: str) -> None:$/;"	f	typeref:typename:None
model	Test_classification_model.py	/^model = classification_model()$/;"	v
model	Test_neural_model.py	/^model = neural_model()$/;"	v
model	Test_voting_model.py	/^model = Voting_model()$/;"	v
model	Train_neural_models.py	/^model = neural_model()$/;"	v
model	get_clear_sky.py	/^    model = clear_sky_model()$/;"	v
model	get_resume_estimators.py	/^model = params["model name"].replace(" ",$/;"	v
model_name	Test_classification_model.py	/^model_name = model_name.replace(" ",$/;"	v
model_name	Test_classification_model.py	/^model_name = params["classification model"]$/;"	v
montly	Count_data.py	/^        montly = data.loc[(station, value)]$/;"	v
names	central_tendency_per_classification.py	/^cloud_types, names = get_labels(params)$/;"	v
names	full_central_tendency_per_classification.py	/^cloud_types, names = get_labels(params)$/;"	v
nan_vector	Modules/functions.py	/^def nan_vector(vector: DataFrame) -> array:$/;"	f	typeref:typename:array
neural_model	Modules/neural_models.py	/^class neural_model:$/;"	c
parameter	organize_2021_data.py	/^        parameter = get_parameter_name(file)$/;"	v
parameters	organize_2021_data.py	/^    parameters = DataFrame(parameters,$/;"	v
parameters	organize_2021_data.py	/^    parameters = [[column[1]$/;"	v
params	Count_data.py	/^params = {$/;"	v
params	Daily_full_graphics.py	/^params = get_params()$/;"	v
params	Daily_graphics.py	/^params = get_params()$/;"	v
params	Reconstructio_graphics.py	/^params = get_params()$/;"	v
params	Test_classification_model.py	/^params = get_params()$/;"	v
params	Test_neural_model.py	/^params = get_params()$/;"	v
params	Test_voting_model.py	/^params = get_params()$/;"	v
params	Train_neural_models.py	/^params = get_params()$/;"	v
params	central_tendency.py	/^params = get_params()$/;"	v
params	central_tendency_per_classification.py	/^params = get_params()$/;"	v
params	compare_estimators.py	/^params = get_params()$/;"	v
params	comparison_data.py	/^params = get_params()$/;"	v
params	comparison_missing_data_graphics.py	/^params = get_params()$/;"	v
params	comparison_models_graphics.py	/^params = get_params()$/;"	v
params	distribution.py	/^params = get_params()$/;"	v
params	distribution_per_classification.py	/^params = get_params()$/;"	v
params	full_central_tendency_per_classification.py	/^params = get_params()$/;"	v
params	full_comparison.py	/^params = get_params()$/;"	v
params	get_clean_data.py	/^params = get_params()$/;"	v
params	get_clear_sky.py	/^params = get_params()$/;"	v
params	get_full_data.py	/^params = get_params()$/;"	v
params	get_resume_estimators.py	/^params = get_params()$/;"	v
params	get_similarity_matrix.py	/^params = get_params()$/;"	v
params	history_plot.py	/^params = get_params()$/;"	v
params	make_template_classification.py	/^params = get_params()$/;"	v
path	make_template_classification.py	/^path = join(params["path graphics"],$/;"	v
plot	Daily_full_graphics.py	/^def plot(SIMA: DataFrame,$/;"	f	typeref:typename:None
plot	Daily_graphics.py	/^def plot(SIMA: DataFrame,$/;"	f	typeref:typename:None
plt	Daily_full_graphics.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	Daily_graphics.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	Reconstructio_graphics.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	central_tendency.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	comparison_missing_data_graphics.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	comparison_models_graphics.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	distribution.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	distribution_per_classification.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	history_plot.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
predict	Modules/classification_classic_models.py	/^    def predict(self,$/;"	m	class:Decision_tree_model	typeref:typename:list
predict	Modules/classification_classic_models.py	/^    def predict(self,$/;"	m	class:Gaussian_naive_model	typeref:typename:list
predict	Modules/classification_classic_models.py	/^    def predict(self,$/;"	m	class:KNN_model	typeref:typename:list
predict	Modules/classification_classic_models.py	/^    def predict(self,$/;"	m	class:Random_forest_model	typeref:typename:list
predict	Modules/classification_classic_models.py	/^    def predict(self,$/;"	m	class:SVM_model	typeref:typename:list
predict	Modules/classification_classic_models.py	/^    def predict(self,$/;"	m	class:classification_model	typeref:typename:None
predict	Modules/neural_models.py	/^    def predict(self,$/;"	m	class:Voting_model	typeref:typename:None
predict	Modules/neural_models.py	/^    def predict(self,$/;"	m	class:base_model	typeref:typename:list
predict	Modules/neural_models.py	/^    def predict(self,$/;"	m	class:neural_model	typeref:typename:None
reconstruction	Reconstructio_graphics.py	/^    reconstruction = get_index(transform_data.clear_data,$/;"	v
report	Test_classification_model.py	/^        report = get_report(dataset.test[1],$/;"	v
report	get_resume_estimators.py	/^    report = report_model.run(params["model type"])$/;"	v
report_model	get_resume_estimators.py	/^    report_model = Report_reader(params)$/;"	v
reports	Test_classification_model.py	/^reports = ""$/;"	v
reports	compare_estimators.py	/^reports = concat([reports_classical,$/;"	v
reports_classical	compare_estimators.py	/^reports_classical = get_reports("classical",$/;"	v
reports_neural	compare_estimators.py	/^reports_neural = get_reports("neural",$/;"	v
result	Test_classification_model.py	/^        result = model.predict(dataset.test)$/;"	v
results	Count_data.py	/^results = DataFrame(results)$/;"	v
results	Count_data.py	/^results = dict()$/;"	v
results	Count_data.py	/^results = results.T$/;"	v
results	central_tendency_per_classification.py	/^    results = concat([results,$/;"	v
results	central_tendency_per_classification.py	/^results = DataFrame()$/;"	v
results	comparison_data.py	/^    results = concat([results,$/;"	v
results	comparison_data.py	/^results = DataFrame(columns=params["stations"])$/;"	v
results	full_central_tendency_per_classification.py	/^    results = concat([results,$/;"	v
results	full_central_tendency_per_classification.py	/^results = DataFrame()$/;"	v
results	full_comparison.py	/^    results = concat([results,$/;"	v
results	full_comparison.py	/^results = DataFrame(columns=params["stations"])$/;"	v
results	get_clean_data.py	/^    results = concat([results,$/;"	v
results	get_clean_data.py	/^results = DataFrame(columns=params["stations"])$/;"	v
results	get_clear_sky.py	/^        results = concat([results,$/;"	v
results	get_clear_sky.py	/^results = DataFrame(columns=params["stations"])$/;"	v
results	organize_2021_data.py	/^        results = concat($/;"	v
results	organize_2021_data.py	/^    results = DataFrame()$/;"	v
results	organize_2021_data.py	/^    results = concat([parameters,$/;"	v
results	organize_2021_data.py	/^    results = concat([stations,$/;"	v
results	organize_2021_data.py	/^    results = results[columns]$/;"	v
results_date	get_full_data.py	/^        results_date = concat([results_date,$/;"	v
results_date	get_full_data.py	/^    results_date = DataFrame()$/;"	v
results_per_day	comparison_data.py	/^        results_per_day = concat([results_per_day,$/;"	v
results_per_day	comparison_data.py	/^    results_per_day = DataFrame()$/;"	v
results_per_day	full_comparison.py	/^        results_per_day = concat([results_per_day,$/;"	v
results_per_day	full_comparison.py	/^    results_per_day = DataFrame()$/;"	v
results_per_day	get_clean_data.py	/^        results_per_day = concat([results_per_day,$/;"	v
results_per_day	get_clean_data.py	/^    results_per_day = DataFrame()$/;"	v
results_per_day	get_clear_sky.py	/^            results_per_day = concat([results_per_day,$/;"	v
results_per_day	get_clear_sky.py	/^        results_per_day = DataFrame()$/;"	v
resume	get_resume_estimators.py	/^    resume = concat([resume,$/;"	v
resume	get_resume_estimators.py	/^resume = DataFrame()$/;"	v
rs	comparison_models_graphics.py	/^rs = clear_sky.run(params)$/;"	v
rs	comparison_models_graphics.py	/^rs = get_hourly_mean(rs)$/;"	v
run	Modules/GHI_model.py	/^    def run(self,$/;"	m	class:GHI_model	typeref:typename:float
run	Modules/RS_model.py	/^    def run(self,$/;"	m	class:RS_model	typeref:typename:float
run	Modules/classification_classic_models.py	/^    def run(self,$/;"	m	class:Decision_tree_model	typeref:typename:None
run	Modules/classification_classic_models.py	/^    def run(self,$/;"	m	class:Gaussian_naive_model	typeref:typename:None
run	Modules/classification_classic_models.py	/^    def run(self,$/;"	m	class:KNN_model	typeref:typename:None
run	Modules/classification_classic_models.py	/^    def run(self,$/;"	m	class:Random_forest_model	typeref:typename:None
run	Modules/classification_classic_models.py	/^    def run(self,$/;"	m	class:SVM_model	typeref:typename:None
run	Modules/classification_classic_models.py	/^    def run(self,$/;"	m	class:classification_model	typeref:typename:None
run	Modules/clear_sky.py	/^    def run(self, params: dict) -> DataFrame:$/;"	m	class:clear_sky_model	typeref:typename:DataFrame
run	Modules/neural_models.py	/^    def run(self) -> list:$/;"	m	class:neural_model	typeref:typename:list
run	Modules/neural_models.py	/^    def run(self,$/;"	m	class:Voting_model	typeref:typename:None
run	Modules/neural_models.py	/^    def run(self,$/;"	m	class:base_model	typeref:typename:DataFrame
run	Modules/report_reader.py	/^    def run(self,$/;"	m	class:Report_reader	typeref:typename:DataFrame
run	Modules/transform_data.py	/^    def run(self,$/;"	m	class:transform_data_model	typeref:typename:DataFrame
similarity	get_full_data.py	/^similarity = read_csv(filename,$/;"	v
similarity_dates	get_full_data.py	/^            similarity_dates = get_best_similarity_dates(similarity,$/;"	v
similarity_vector	get_full_data.py	/^            similarity_vector = get_similarity_vectors(clean_data,$/;"	v
sort	Modules/functions.py	/^def sort(data: DataFrame) -> DataFrame:$/;"	f	typeref:typename:DataFrame
split_data	Modules/dataset_model.py	/^    def split_data(self) -> tuple:$/;"	m	class:dataset_model	typeref:typename:tuple
stations	organize_2021_data.py	/^    stations = DataFrame(stations,$/;"	v
stations	organize_2021_data.py	/^    stations = [[column[0]$/;"	v
stations	organize_2021_data.py	/^stations = {$/;"	v
stations_bar	Daily_full_graphics.py	/^stations_bar = tqdm(params["stations"])$/;"	v
stations_bar	Daily_graphics.py	/^stations_bar = tqdm(params["stations"])$/;"	v
subparams	Reconstructio_graphics.py	/^    subparams = get_station_location(SIMA_data,$/;"	v
subparams	Reconstructio_graphics.py	/^    subparams = get_subparams(station,$/;"	v
template	make_template_classification.py	/^template = DataFrame(index=dates,$/;"	v
tendency	central_tendency_per_classification.py	/^    tendency = data[cloud_type].describe()$/;"	v
tendency	full_central_tendency_per_classification.py	/^    tendency = data[cloud_type].describe()$/;"	v
test	Modules/neural_models.py	/^    def test(self) -> None:$/;"	m	class:neural_model	typeref:typename:None
threshold_filter	Modules/functions.py	/^def threshold_filter(data: DataFrame,$/;"	f	typeref:typename:DataFrame
transform_data	Reconstructio_graphics.py	/^    transform_data = transform_data_model(subparams)$/;"	v
transform_data_model	Modules/transform_data.py	/^class transform_data_model:$/;"	c
values	central_tendency_per_classification.py	/^        values = classification.get_data_from_type(cloud_type)$/;"	v
values	central_tendency_per_classification.py	/^        values = daily[station][dates]$/;"	v
values	full_central_tendency_per_classification.py	/^        values = classification.get_data_from_type(cloud_type)$/;"	v
values	full_central_tendency_per_classification.py	/^        values = daily[station][dates]$/;"	v
vector	distribution_per_classification.py	/^        vector = dataset.train[0][index_vector]$/;"	v
vector	distribution_per_classification.py	/^        vector = vector.flatten()$/;"	v
vector	distribution_per_classification.py	/^        vector = vector[vector < 1]$/;"	v
vector	distribution_per_classification.py	/^        vector = vector[vector > 0]$/;"	v
vectors	get_similarity_matrix.py	/^vectors = clean_data.data.to_numpy()$/;"	v
vectors	get_similarity_matrix.py	/^vectors = vectors.T$/;"	v
vectors	get_similarity_matrix.py	/^vectors = vectors.reshape(-1, 24)$/;"	v
weights	distribution_per_classification.py	/^        weights = ones_like(vector)*100 \/ len(vector)$/;"	v
year	Count_data.py	/^    year = file.split(".")[0]$/;"	v
year	comparison_data.py	/^        year = date.year$/;"	v
year	comparison_data.py	/^year = 0$/;"	v
year	get_clean_data.py	/^        year = date.year$/;"	v
year	get_clean_data.py	/^year = 0$/;"	v
